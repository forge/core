<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="forge.plugin.dev">
	<title>Developing a Plugin</title>
	<para>
      Part of Forge's architecture is to allow extensions to be created with extreme 
      ease. This is done using the same programming model that you would use for any 
      CDI or Java EE application, and you should quickly recognize the annotation-driven
      patterns and practices applied.
   </para>
   <para>
      A Forge plugin could be as simple as a tool to print files to the console, or
      as complex as deploying an application to a server, 'tweet'ing the status of your
      latest source-code commit, or even sending commands to a home-automation system; 
      the sky is the limit!
   </para>

   <section id="plugin.dev.maven">
      <title>Referencing the Forge APIs</title>
      <para>
         Because Forge is based on Maven, the easiest way to get started quickly writing
         a plugin is to create a new maven Java project. This can be done by hand, or
         using Forge's build in plugin project facet.
      </para>
      <section> 
         <title>Using Forge</title>
         <para>
            In two short steps, you can have a new plugin-project up and running; this
            can be done using Forge itself!
            <orderedlist>
               <listitem>
                  Execute <literal>$ forge</literal> from a command prompt.</listitem>
               <listitem>
                  Create a new project:
                  <programlisting>$ new-project --named {name} --topLevelPackage {com.package} --projectFolder {/directory/path}</programlisting>
               </listitem>
               <listitem>
                  Install the Forge API facet, press ENTER to confirm installation of 
                  required facet dependencies, and select the API version you wish to use. 
                  <programlisting>$ project install-facet forge.api</programlisting>
               </listitem>
            </orderedlist>
            That's it! Now your project is ready to be compiled and installed in Forge,
            but you may still want to <link linkend="plugin.dev.interface">create some
            Plugins</link>.
         </para>
         <para>
         	<example>
         		<title>Creating a new Forge Plugin Project</title>
				<programlisting>
[no project] Desktop $
[no project] Desktop $ new-project --named example-plugin --topLevelPackage com.example.forge.plugin
Use [~/Desktop/example-plugin] as project directory? [Y/n] Y
Wrote ~/Desktop/example-plugin/src/main/resources/META-INF/forge.xml
***SUCCESS*** Created project [example-plugin] in new working directory [~/Desktop/example-plugin]
[example-plugin] example-plugin $
[example-plugin] example-plugin $ 
[example-plugin] example-plugin $ project install-facet forge.api
The [forge.api] facet depends on the following missing facet(s): [forge.spec.cdi]. Install as well? [Y/n] Y
Wrote ~/Desktop/example-plugin/src/main/resources/META-INF/beans.xml
***SUCCESS*** Installed [forge.spec.cdi] successfully.
Install which version of the Forge API?

  1 - [org.jboss.forge:forge-shell-api:1.0.0-SNAPSHOT]
  2 - [org.jboss.forge:forge-shell-api:1.0.0.Alpha2]

Choose an option by typing the number of the selection: 1
***SUCCESS*** Installed [forge.api] successfully.
[example-plugin] example-plugin $</programlisting>         	
         	</example>
         </para>
      </section>
      <section>
         <title>With Maven</title>
         <para>
            If you do not wish to create a new plugin project using Forge itself, you
            will need to manually include the Forge-API dependencies. For purposes of
            simplicity, we have pasted a sample Maven POM file which can
            be used as a starting point for a new plugin:
         </para>
         <para>
	         NOTE: You must also create a <literal>beans.xml</literal> file in the 
	         <literal>src/main/resources/META-INF/</literal> directory of your
	         project, or your plugin will not be detected by Forge.
	         
            <tip>
               <literal>'org.jboss.forge : forge-shell-api : {version}'
               </literal> is the only dependency you must include in your project. 
            </tip>
            
            <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
                             http://maven.apache.org/xsd/maven-4.0.0.xsd" 
    xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.example.plugin</groupId>
  <artifactId>example</artifactId>
  <version>1.0.0-SNAPSHOT</version>

  <properties>
    <forge.api.version>[1.0.0-SNAPSHOT,)</forge.api.version>
  </properties>
  
  <dependencies>
    <dependency>
      <groupId>org.jboss.forge</groupId>
      <artifactId>forge-shell-api</artifactId>
      <version>${forge.api.version}</version>
    </dependency>
  </dependencies>
  
  <repositories>
    <repository>
      <id>jboss</id>
      <url>https://repository.jboss.org/nexus/content/groups/public/</url>
    </repository>
  </repositories>
  
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>]]></programlisting>
         </para>
      </section>
   </section>

   <section id="plugin.dev.interface">
      <title>Implementing the Plugin interface</title>
      <para>
      	The first thing you must do in order to create a forge plugin, is create a new class
      	and implement the <literal>org.jboss.forge.shell.plugins.Plugin</literal> interface.
      	Notice that the interface has no methods, this is because you will be adding your own
      	custom commands later.
         <programlisting>import org.jboss.forge.shell.plugins.Plugin;
         
public class ExamplePlugin implements Plugin {
}</programlisting>
      </para>
   </section>
   
   <section id="plugin.dev.naming">
      <title>Naming your plugin</title>
      Each plugin should be given a name. This is done by adding the 
      <literal>@org.jboss.forge.shell.plugins.Alias</literal> annotation to your plugin class.
      
      By default, if no <literal>@Alias</literal> annotation is found, the 
      lower-case Class name will be used; for instance, our <literal>ExamplePlugin</literal>,
      above, would be executed by typing:
      
      <programlisting>$ exampleplugin </programlisting>
      
      Now we will add a name to our plugin.
      <programlisting>@Alias("example")
public class ExamplePlugin implements Plugin {
   // commands
}</programlisting>
               
      Our named <literal>@Alias("example") ExamplePlugin</literal> would be executed by typing:
      <programlisting>$ example </programlisting>
   </section>
   
   <section id="plugin.dev.commands">
      <title>Add commands to your plugin</title>
      <para>
         Now that you have implemented the <literal>Plugin</literal> interface, it's time
         to add some functionality. This is done by adding "Commands" to your plugin class.
         Commands are plain Java methods in your plugin Class. Plugin methods must be annotated
         as either a <literal>@DefaultCommand</literal>, the method to be invoked if the plugin
         is called by name (with no additional commands), or <literal>@Command("...")</literal>,
         in which case the plugin name and command name must both be used to invoke the method.
      </para>
      <para>
         Commands also accept <literal>@Options</literal> parameters as arguments. These are
         <link linkend="plugins.dev.options">described in detail</link> later in this section.
      </para>
      
      <section id="plugin.dev.commands.default">
         <title>Default commands</title>
         <para>
            Default commands must be annotated with <literal>@DefaultCommand</literal>, and are
            not named; you may still provide help text or command metadata. Each
            plugin may have only one <literal>@DefaultCommand</literal>.
         </para>
         <para>
            The following default command would be executed by executing the plugin by its name:
            
            <programlisting>public class ExamplePlugin implements Plugin {
   @DefaultCommand
   public void exampleDefaultCommand( @Option String opt ) {
      out.println(">> invoked default command with option value: " + opt);
      // this method will be invoked, and 'opt' will be passed from the command line
      // 'out' is your handle to this plugin's output stream.
   }
}</programlisting>
            <programlisting>$ exampleplugin some-input</programlisting>
            In this case, the value of '<literal>opt</literal>' will be "some-input".
            <literal>@Options</literal> are <link linkend="plugin.dev.options">described
            in detail</link> later in this section.
        </para>
      </section>
      
      <section id="plugin.dev.commands.named">
         <title>Named commands</title>
         <para>
            Named commands must, to little surprise, be given a name with which they are
            invoked. This is done by placing the <literal>@Command("...")</literal> annotation
            on a public Java method in your <literal>Plugin</literal> class.
         </para>
         <para>
            The following command would be executed by executing the plugin by its name,
            followed by the name of the command:
         
            <programlisting>public class ExamplePlugin implements Plugin {
   @Command("perform")
   public void exampleCommand( @Option String opt, PipeOut out) {
       out.println(">> the command \"perform\" was invoked with the value: " + opt);
   }
}</programlisting>
            <programlisting>$ exampleplugin perform
>> the command "perform" was invoked with the value: null</programlisting>
         </para>
         <para>
            Notice that our command method has a parameter called "<literal>PipeOut</literal>,"
            in addition to our 'opt' parameter. <literal>PipeOut</literal> is a special 
            parameter, which can be placed in any order. It provides access to a
            variety of shell output functions, including enabling color and controlling 
            piping between plugins.
         </para>
         <para>
            Along with <literal>PipeOut</literal>, there is also a 
            <literal>@PipeIn InputStream stream</literal> annotation,
            which is used to inject a piped input stream (output from another
            Plugin's <literal>PipeOut</literal>.) These concepts will be described more in the
            section on <link linkend="plugin.dev.piping">piping</link>, but for now, you
            should just know that <literal>PipeOut</literal> is used to write output
            to the Forge console.
         </para>
      </section>
   </section>
   
   
   
   <section id="plugin.dev.options">
      <title>Understanding command @Options</title>

      <para>
         Once we have a command or two in our Plugin, it's time to give our users some
         control over what it does; to do this, we use <literal>@Option</literal> params;
         options enable users to pass information of various types into our commands.
      </para>
      <para>
         Options can be named, in which case they are set by passing the
         <literal>--name</literal> followed immediately by the value, or if the option
         is a boolean flag, simply passing the flag will signal a `true` value.
         
         Named parameters may be passed into a command in any order, while unnamed 
         parameters must be passed into the command in the order with which
         they were defined.
      </para>
      
      <section id="plugin.dev.options.named">
         <title>--named options</title>
      
         <para>
            As mentioned above, options can be given both a long-name and/or a 
            short-name.  in which case, they would be defined like this:
            
            <programlisting>@Option(name="one", shortName="o")</programlisting>
            
            Short named parameters are called using a single dash '-' followed by
            the letter assigned '-o'; whereas long-named parameters are called using 
            a double dash '--' immediately followed by the name '--one'. )
         </para>
         <para>
            For example, the following command accepts several options, named 'one', 
            and 'two':
            
            <programlisting>public class ExamplePlugin implements Plugin {
   @Command("perform")
   public void exampleCommand( 
                  @Option(name="one", shortName="o") String one,
                  @Option(name="two") String two,
                  PipeOut out) {
       out.println(">> option one equals: " + one);
       out.println(">> option two equals: " + two);
   }
}</programlisting>
   
            The above command, when executed, would produce the following output:
         
            <programlisting>$ exampleplugin perform --one cat --two dog 
>> option one equals: cat
>> option two equals: dog</programlisting>
         </para>
         <para>
            <tip>
               Named parameters can be called in any order. Notice that we could have also 
               called the command with options 'one' and 'two' in reverse order, or 
               by using their short names. These commands are equivalent:
               <programlisting>$ exampleplugin perform --one cat --two dog
$ exampleplugin perform --two dog --one cat
$ exampleplugin perform --two dog -o cat</programlisting>
            </tip>
         </para>
      </section>
      
      <section id="plugin.dev.options.ordered">
         <title>Ordered options</title>
         <para>
            In addition to <literal>--named</literal> option parameters, as described
            <link linkend="plugin.dev.options.named">above</link>, parameters may also
            be passed on the command line by the order in which they are entered. These
            are called "ordered option parameters", and do not require any parameters
            other than help or description information. 
            
            <programlisting>@Option String value</programlisting>
            
            The order of the options in the method signature controls how values are
            assigned from parsed Forge shell command statements.
         </para>
         <para>
            For example, the following command accepts several options, named 'one', 
            and 'two':
            
            <programlisting>public class ExamplePlugin implements Plugin {
   @Command("perform")
   public void exampleCommand( 
                  @Option String one,
                  @Option String two,
                  PipeOut out) {
       out.println(">> option one equals: " + one);
       out.println(">> option two equals: " + two);
   }
}</programlisting>
            The above command, when executed, would produce the following output:
         
            <programlisting>$ exampleplugin perform cat dog 
>> option one equals: cat
>> option two equals: dog</programlisting>
         </para>
      </section>
      
      <section id="plugin.dev.options.combined">
         <title>Combining --named and ordered options</title>
         <para>
            Both <link linkend="plugin.dev.options.named"><literal>--named</literal></link>
            and <link linkend="plugin.dev.options.ordered">ordered</link> option
            parameters can be mixed in the same command; there are some constraints on
            how commands must be typed, but there is a great deal of flexibility as well.
            
            <programlisting>@Option String value,
@Option(name="num") int number</programlisting>
            
            The order of ordered options in the method signature controls how values are
            assigned from the command line shell, whereas the named options have no 
            bearing on the order in which inputs are provided on the command line.
         </para>
         <para>
            For example, the following command accepts several options, named 'one', 
            'two', and several more options that are not named:
            
            <programlisting>public class ExamplePlugin implements Plugin {
   @Command("perform")
   public void exampleCommand( 
                  @Option(name="one") String one,
                  @Option(name="two") String two,
                  @Option String three,
                  @Option String four,
                  PipeOut out) {
       out.println(">> option one equals: " + one);
       out.println(">> option two equals: " + two);
       out.println(">> option three equals: " + three);
       out.println(">> option four equals: " + four);
   }
}</programlisting>
            The above command, when executed, would produce the following output:
         
            <programlisting>$ exampleplugin perform --one cat --two dog bird lizard  
>> option one equals: cat
>> option two equals: dog 
>> option three equals: bird
>> option four equals: lizard</programlisting>

            However, we could also achieve the same result by re-arranging parameters,
            and as long as the name-value pairs remain together, and the ordered values
            are passed in the correct order, interpretation will remain the same:
            <programlisting>$ exampleplugin --two dog bird --one cat lizard  
>> option one equals: cat
>> option two equals: dog 
>> option three equals: bird
>> option four equals: lizard</programlisting>
         </para>
      </section>
   </section>
   
   
   <section id="plugin.dev.piping">
      <title>Piping output between plugins</title>
      
      <para>
         Much like a standard UNIX-style shell, the Forge shell supports piping IO between
         executables; however in the case of forge, piping actually occurs between plugins,
         commands, for example:
      </para>
      
      <programlisting>$ cat /home/username/.forge/config | grep automatic 
@/* Automatically generated config file */;</programlisting>

      <para>
         This might look like a typical BASH command, but if you run forge and try it,
         you may be surprised to find that the results are the same as on your system
         command prompt, and in this example, we are demonstrating the pipe: '|'
      </para>      

      <para>
         In order to enable piping in your plugins, you must use one or both of the
         <literal>@PipeIn InputStream stream</literal> or <literal>PipeOut out</literal>
         command arguments. Notice that <literal>PipeOut</literal> is a java type that 
         must be used as a Method parameter, whereas <literal>@PipeIn</literal> is 
         an annotation that must be placed on a Java <literal>@PipeIn InputStream 
         stream</literal> or <literal>@PipeIn String in</literal> Method parameter.
      </para>
      
      <para>
         `<literal>PipeOut out</literal>` - by default - is used to print output to 
         the shell console; however, if the plugin on the left-hand-side is piped to 
         a secondary plugin on the command line, the output will be written to the
         `<literal>@PipeIn InputStream stream</literal>` of the plugin on the 
         right-hand-side:
         
         <programlisting>$ left | right</programlisting>
         
         Or in terms of pipes, this could be thought of as a flow of data from left
         to right:
         
         <programlisting>$ PipeOut out -> @PipeIn InputStream stream</programlisting>
         
         Notice that you can pipe output between any number of plugins as long as each
         uses both a <literal>@PipeIn InputStream</literal> and <literal>PipeOut</literal>:
         
         <programlisting>$ first command | second command | third command</programlisting>
      </para>
      
      <example>
      	<title>@PipeIn InputStream stream</title>
      	<programlisting>
   @Command("example-command")
   public void exampleCommand(
            @PipeIn final InputStream in,
            @Option(required = false) final boolean option,
            PipeOut out)
   { ... }</programlisting>
      </example>
      
      <example>
      	<title>@PipeIn String in</title>
      	<programlisting>
   @Command("example-command")
   public void exampleCommand(
            @PipeIn final String in,
            @Option(required = false) final boolean option,
            PipeOut out)
   { ... }</programlisting>
      </example>
      
      <para>
         Take the '<literal>grep</literal>' command itself, for example, which supports
         two methods of invocation: Invocation on one or more <literal>Resource&lt;?&gt;</literal>
         objects, or invocation on a piped <literal>InputStream</literal>.
      </para>
      
      <tip>
         <para>
            If no piping is invoked (e.g: via standalone execution of the plugin), 
            a piped <literal>InputStream</literal> will be null. In addition, piped
            <literal>InputStream</literal>s do not need to be closed; Forge will
            handle cleanup of these streams.
         </para>
      </tip>
      
      <programlisting><![CDATA[@Alias("grep")
@Topic("File & Resources")
@Help("print lines matching a pattern")
public class GrepPlugin implements Plugin
{
   @DefaultCommand
   public void run(
         @PipeIn final InputStream pipeIn,
         @Option(name = "ignore-case", shortName = "i", flagOnly = true) boolean ignoreCase,
         @Option(name = "regexp", shortName = "e") String regExp,
         @Option(description = "PATTERN") String pattern,
         @Option(description = "FILE ...") Resource<?>[] resources, 
         final PipeOut pipeOut
   ) throws IOException 
   {
      Pattern matchPattern = /* determine pattern (omitted for space) */;

      if (resources != null) {
      
         /* User passed file(s) on the command line; grep those. */
      
         for (Resource<?> r : resources) {
            InputStream inputStream = r.getResourceInputStream();
            try {
               match(inputStream, matchPattern, pipeOut, ignoreCase);
            }
            finally {
               inputStream.close();
            }
         }
      }
      else if (pipeIn != null) {
      
         /* No files were passed on the command line; check for a 
          * piped InputStream and use that.
          */
      
         match(pipeIn, matchPattern, pipeOut, ignoreCase);
      }
      else {
      
         /* No input was passed to the plugin. */
      
         throw new RuntimeException("Error: arguments required");
      }
   }

   private void match(InputStream instream, Pattern pattern, PipeOut pipeOut, boolean caseInsensitive) throws IOException {
      StringAppender buf = new StringAppender();

      int c;
      while ((c = instream.read()) != -1) { /* Read from the given stream. */
         switch (c) {
         case '\r':
         case '\n':
            String s = caseInsensitive ? buf.toString().toLowerCase() : buf.toString();

            if (pattern.matcher(s).matches()) {
               pipeOut.println(s); /* Write to the output pipe. */
            }
            buf.reset();
            break;
         default:
            buf.append((char) c);
            break;
         }
      }
   }
}]]></programlisting>
   </section>
   
   <section id="plugin.dev.classpath">
      <title>Ensure all referenced libraries are on the CLASSPATH</title>
      <para>
         If your Plugin depends on classes or libraries that are not provided by Forge, 
         then you must either package those classes in the JAR file containing your Plugin 
         (for instance, using the maven <ulink url="http://maven.apache.org/plugins/maven-shade-plugin/">
         shade plugin</ulink>), or you must ensure that the required dependencies are also placed 
         on the <literal>CLASSPATH</literal> (typically in the <literal>$FORGE_HOME/lib</literal> folder,)
         otherwise your plugin will *not* be loaded.
      </para>
      
      <warning>
      	<para>
      		NOTE: This is required even if dependencies are specified directly in your pom.xml file.
      		Transitive dependencies WILL NOT BE INSTALLED with your plugin; they must be packaged via shade.
        </para>
     </warning>
      
      <example>
      	<title>Using Forge to set up Shading</title>
      	<programlisting>[example-plugin] example-plugin $ shade setup
***SUCCESS*** Shade plugin is installed.
[example-plugin] example-plugin $              
[example-plugin] example-plugin $ shade include commons-collections:commons-collections:3.2.1
</programlisting>
		<para>
			Notice that the pom.xml file has been modified and now includes a shade
			configuration including commons-collections.
		</para>
		<programlisting><![CDATA[      <plugin>
        <artifactId>maven-shade-plugin</artifactId>
        <version>1.4</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <artifactSet>
                <includes>
                  <include>commons-collections:commons-collections</include>
                </includes>
              </artifactSet>
            </configuration>
          </execution>
        </executions>
      </plugin>]]></programlisting>
      </example>
      
      <warning>
      	<para>
      		Do NOT include Forge provided libraries with shade, or you will very likely create a
      		non-functional plugin.
        </para>
     </warning>
     
      <para>
	      It it also recommended, however, to relocate shaded class files to a new package.
	      Your code will access the bundled code at this new location, and will prevent version
	      conflicts if another plugin bundles a different version of the same library. For this,
	      we use the following command.
	      <programlisting>$ shade relocate --pattern {ORIGINAL PGK} --shadedPattern {NEW PKG} --excludes {EXCLUDED PKGS...}</programlisting>
      </para>
      <para>
      	For the purposes of this example, let us assume that our Plugin depends on the Apache
      	Commons Collections library (<literal>org.apache.commons.collections</literal>), and we 
      	want to make sure that no conflicts occur.
      	<programlisting>[example-plugin] example-plugin $ shade relocate --pattern org.apache.commons.collections --shadedPattern ~.shaded.apache.collections
***SUCCESS*** Relocating [org.apache.commons.collections] to [com.example.forge.plugin.shaded.apache.collections]
[example-plugin] example-plugin $ 
      	</programlisting>
      	This should be repeated for each dependency as necessary. Notice that our POM has been updated
      	with the configuration:
      	<programlisting><![CDATA[   <plugin>
     <artifactId>maven-shade-plugin</artifactId>
     <version>1.4</version>
     <executions>
       <execution>
         <phase>package</phase>
         <goals>
           <goal>shade</goal>
         </goals>
         <configuration>
           <artifactSet>
             <includes>
               <include>commons-collections:commons-collections</include>
             </includes>
           </artifactSet>
           <relocations>
             <relocation>
               <pattern>org.apache.commons.collections</pattern>
               <shadedPattern>com.example.forge.plugin.shaded.apache.collections</shadedPattern>
             </relocation>
           </relocations>
         </configuration>
       </execution>
     </executions>
   </plugin>]]></programlisting>
      </para>
      
      When you build your plugin, you should see confirmation output from the Maven Shade Plugin
      looking something like this:
      
      <programlisting>[INFO] --- maven-shade-plugin:1.4:shade (default) @ example-plugin ---
[INFO] Excluding org.jboss.forge:forge-shell-api:jar:{version} from the shaded jar.
[INFO] Excluding org.jboss.forge:forge-parser-java-api:jar:{version} from the shaded jar.
[INFO] Excluding org.jboss.forge:forge-parser-xml:jar:{version} from the shaded jar.
[INFO] Excluding org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-api:jar:{version} from the shaded jar.
[INFO] Excluding javax.enterprise:cdi-api:jar:{version} from the shaded jar.
[INFO] Excluding org.jboss.spec.javax.interceptor:jboss-interceptors-api:jar:{version} from the shaded jar.
[INFO] Excluding javax.annotation:jsr250-api:jar:{version} from the shaded jar.
[INFO] Excluding javax.inject:javax.inject:jar:{version} from the shaded jar.

[INFO] Including commons-collections:commons-collections:jar:3.2.1 in the shaded jar.

[INFO] Replacing original artifact with shaded artifact.
[INFO] Replacing ~/Desktop/example-plugin/target/example-plugin-1.0.0-SNAPSHOT.jar 
   with ~/Desktop/example-plugin/target/example-plugin-1.0.0-SNAPSHOT-shaded.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------</programlisting>
   </section>
   
   <section id="plugin.dev.installing">
      <title>Make your Plugin available to Forge</title>
      <para>
         After following all of the steps in <link linkend="forge.plugin.dev">this section</link>,
         you should now be ready to install your Plugin into the Forge environment. There are
         several methods for installing and distributing your plugin; these methods are described 
         in this section.
      </para>
      <para>
      	 All plugin installation should take place using the '<literal>$ forge</literal>'
      	 meta-command. For more information on this command, type:
      	 <programlisting>$ help forge</programlisting>
      </para>
      
      <tip>
      	<para>
			After installation, Forge automatically hot-loads plugin classes and makes them available
			for use. There is no need to restart Forge when installing or updating plugins.
      	</para>
      </tip>
      
      <section id="plugin.dev.installing.local.project">
      	<title>As local source files (for development)</title>
      	<para>
      		Perhaps the simplest form of plugin installation is when the plugin source files are
      		stored locally in a project on the local computer. If a plugin project is already
      		checked out locally, it may be built and installed using the following command:
      		<programlisting>$ forge source-plugin {PATH}</programlisting>
      	</para>
      	<example>
      		<title>Installing a local plugin project</title>
      		<programlisting>[no project] Desktop $ forge source-plugin ~/Desktop/example-plugin/
***INFO*** Invoking build with underlying build system.
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building example-plugin 1.0.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] Compiling 1 source file to ~/Desktop/example-plugin/target/classes
[INFO] 

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
There are no tests to run.

[INFO] --- maven-jar-plugin:2.3.1:jar (default-jar) @ example-plugin ---
[INFO] Building jar: /home/lb3/Desktop/example-plugin/target/example-plugin-1.0.0-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-shade-plugin:1.4:shade (default) @ example-plugin ---
[INFO] Excluding org.jboss.forge:forge-shell-api:jar:1.0.0-SNAPSHOT from the shaded jar.
[INFO] Excluding org.jboss.forge:forge-parser-java-api:jar:1.0.0-SNAPSHOT from the shaded jar.
[INFO] Excluding org.jboss.forge:forge-parser-xml:jar:1.0.0-SNAPSHOT from the shaded jar.
[INFO] Excluding org.jboss.shrinkwrap.descriptors:shrinkwrap-descriptors-api:jar:0.1.4 from the shaded jar.
[INFO] Excluding javax.enterprise:cdi-api:jar:1.0-SP4 from the shaded jar.
[INFO] Excluding org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.1_spec:jar:1.0.0.Beta1 from the shaded jar.
[INFO] Excluding javax.annotation:jsr250-api:jar:1.0 from the shaded jar.
[INFO] Excluding javax.inject:javax.inject:jar:1 from the shaded jar.
[INFO] Including commons-collections:commons-collections:jar:3.2.1 in the shaded jar.
[INFO] Replacing original artifact with shaded artifact.
[INFO] Replacing /home/lb3/Desktop/example-plugin/target/example-plugin-1.0.0-SNAPSHOT.jar with /home/lb3/Desktop/example-plugin/target/example-plugin-1.0.0-SNAPSHOT-shaded.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
***SUCCESS*** Build successful.</programlisting>
	
			If you are installing an updated version of an existing plugin, Forge will prompt for confirmation
			to continue installation.

	<programlisting>
An existing version of this plugin was found. Replace it? [Y/n] y
***INFO*** Installing plugin artifact.
Wrote ~/.forge/plugins/com.example.forge.plugin$example-plugin$1$1.0.0-SNAPSHOT.jar
***SUCCESS*** Installed from [example-plugin] successfully.
[no project] Desktop $</programlisting>

			Your plugin is now installed and ready to use:
			
			<programlisting>$ exampleplugin perform --one cat --two dog bird lizard
>> option one equals: cat
>> option two equals: dog 
>> option three equals: bird
>> option four equals: lizard</programlisting>

      	</example>
      </section>
      
      <section id="plugin.dev.installing.remote.git">
      	<title>As a git repository</title>
      	<para>
      		Plugins may be installed directly from a Git repository. This feature simply automates the
      		source code checkout and installation, much like the 
      		<link linkend="plugin.dev.installing.local.project">$ forge source-plugin</link> command.
      		Your plugin will be built and installed while Forge runs.
      		
      		<programlisting>$ forge git-plugin git://github.com/username/repository.git --ref 1.0.0.Alpha1</programlisting>
      		
      		Notice that a --ref may be specified if a specific branch or tag should be built. This is
      		recommended, since snapshots are more likely to contain unstable code.
      	</para>
      </section>
      
      <section id="plugin.dev.installing.mvn">
      	<title>As a Maven artifact</title>
      	<para>
      		One of the most convenient methods for installing plugins is via Maven.
      		
      		<programlisting>$ forge mvn-plugin com.example:example-plugin:{version}</programlisting>
      	</para>
      	<para>
      		Be sure to check the identifier thoroughly before installing. If a {version} is not specified,
      		Forge will allow the user to choose from a list of available plugin versions. The version
      		selected will be installed while Forge runs.
      	</para>
      </section>
      
      <section id="plugin.dev.installing.local.jar">
      	<title>As a local distributable JAR file</title>
      	<para>
      		In addition to automated installation of plugin projects on the local disk, Forge is also
      		able to install a JAR file directly as a plugin; this JAR is installed while Forge runs.
      		
      		<programlisting>$ forge jar-plugin ~/Downloads/plugin.jar --id com.example:example-plugin</programlisting>
      		
      		Notice that you must specify a Dependency ID for the plugin. Forge uses these identifiers to
      		track installed versions of plugins. This means that if you use an incorrect identifier and 
      		attempt to upgrade the plugin, Forge may not detect the duplicate version. If this occurs,
      		it could prevent Forge from running, in which case, a manual cleanup of plugin files is required.
      	</para>
      	<para>
      		It is not recommended to install plugins directly as JAR files unless you are certain that the
      		content of the JAR file may be trusted.
      	</para>
      	
        <tip>
          <para>
          	The JAR must include a /META-INF/beans.xml file, or none of the 
         	classes in the archive will be discovered; therefore, the Plugin will not be made
         	available to Forge.
          </para>
        </tip>
      </section>
      
      <section id="plugin.dev.installing.remote.jar">
      	<title>As a remote distributable JAR file</title>
      	<para>
      		In addition to automated installation of plugin projects on the local disk, Forge is also
      		able to install a JAR file from a URL; this JAR is installed while Forge runs.
      		
      		<programlisting>$ forge url-plugin http://example.com/forge/plugin.jar --id com.example:example-plugin</programlisting>
      		
      		Notice that you must specify a Dependency ID for the plugin. Forge uses these identifiers to
      		track installed versions of plugins. This means that if you use an incorrect identifier and 
      		attempt to ugprade the plugin, Forge may not detect the duplicate version. If this occurs,
      		it could prevent Forge from running, in which case, a manual cleanup of plugin files is required.
      	</para>
      	<para>
      		It is not recommended to install plugins directly as JAR files unless you are certain that the
      		content of the JAR file may be trusted.
      	</para>
      	
        <tip>
          <para>
          	The JAR must include a /META-INF/beans.xml file, or none of the 
         	classes in the archive will be discovered; therefore, the Plugin will not be made
         	available to Forge.
          </para>
        </tip>
      </section>
   </section>
   
   <section id="plugin.dev.removing">
      <title>Removing a plugin from Forge</title>
      <para>
      	 In order to remove plugins, you must shut down Forge and delete the plugin files
      	 from the forge plugin directory (usually <literal>~/.forge/plugins/</literal>). 
      	 To see a list of which plugins are installed, and where they are stored, type
      	 the following command:
      	 <programlisting>[no project] Desktop $ forge list-plugins --all

[installed plugins]
org.jboss.errai.forge : forge-errai : 1.0.0-SNAPSHOT
com.ocpsoft.forge.prettyfaces : prettyfaces-forge-plugin : 1.0.0.Alpha2
com.example.forge.plugin : example-plugin : 1.0.0-SNAPSHOT

[no project] Desktop $</programlisting>
      </para>
   </section>
</chapter>
